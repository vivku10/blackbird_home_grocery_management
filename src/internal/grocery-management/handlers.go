package api

import (
	"net/http"
	"time"
)

// responseWriter is a custom http.ResponseWriter that captures the status code.
type responseWriter struct {
	http.ResponseWriter
	statusCode int
	written    bool
}

// NewResponseWriter creates a new response writer.
func NewResponseWriter(w http.ResponseWriter) *responseWriter {
	return &responseWriter{ResponseWriter: w, statusCode: http.StatusOK}
}

// WriteHeader captures the status code and delegates to the original ResponseWriter, ensuring it's only called once.
func (rw *responseWriter) WriteHeader(code int) {
	if rw.written {
		return // Prevent multiple WriteHeader calls
	}
	rw.statusCode = code
	rw.ResponseWriter.WriteHeader(code)
	rw.written = true
}

// Write ensures WriteHeader is called with the default status code before any response body is written.
func (rw *responseWriter) Write(b []byte) (int, error) {
	if !rw.written {
		rw.WriteHeader(http.StatusOK) // Ensure WriteHeader is called at least once
	}
	return rw.ResponseWriter.Write(b)
}

// Handles returning a 404 to the client and logging a message for unsupported routes
func (s *apiService) handle404(w http.ResponseWriter, r *http.Request) {
	http.NotFound(w, r)
}

// Handles returning a simple about message
func (s *apiService) handleAbout(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusOK)
	w.Write([]byte(" Sample Service: server generated by Ambassador Labs"))
}

// logMiddleware logs the request method, URL path, duration, and status code.
func (s *apiService) logMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		start := time.Now()

		// Use the responseWriter wrapper to capture the status code and handle Write calls properly.
		wrappedWriter := NewResponseWriter(w)
		next.ServeHTTP(wrappedWriter, r)

		// Log with the captured status code.
		s.logger.Info().Msgf("%s %s %d %s", r.Method, r.URL.Path, wrappedWriter.statusCode, time.Since(start))
	})
}
